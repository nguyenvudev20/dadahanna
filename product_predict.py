import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import requests
from io import BytesIO
import plotly.express as px
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense


st.set_page_config(page_title="üì¶ D·ª± b√°o ƒë·∫∑t h√†ng kho", layout="wide")
st.title("üì¶ D·ª± b√°o ƒë·∫∑t h√†ng kho theo doanh s·ªë 6 th√°ng g·∫ßn nh·∫•t")

# ƒê∆∞·ªùng d·∫´n file Excel tr√™n GitHub (raw link)
excel_url = "data_product.xlsx"

# ƒê·ªçc file Excel
df = pd.ExcelFile("data_product.xlsx")

df_sales = df.parse("sales")
df_tonkho = df.parse("tonkho")


if df_sales is not None and df_tonkho is not None:
    df_sales['date'] = pd.to_datetime(df_sales['date'], errors='coerce')
    latest_date = df_sales["date"].max()
    six_months_ago = latest_date - pd.DateOffset(months=6)
    df_recent_sales = df_sales[df_sales["date"] >= six_months_ago]

    sales_summary = df_recent_sales.groupby("spcode")["numsell"].sum().reset_index()
    sales_summary.columns = ["spcode", "total_6m_sales"]
    sales_summary["monthly_avg"] = (sales_summary["total_6m_sales"] / 6).round()
    sales_summary["forecast_qty"] = (sales_summary["monthly_avg"] * 3.5).round()

    df_result = pd.merge(sales_summary, df_tonkho[["spcode", "tonkho", "hangve","conlai"]], on="spcode", how="left")
    df_result["tonkho"] = df_result["tonkho"].fillna(0)
    df_result["hangve"] = df_result["hangve"].fillna(0)
    df_result["conlai"] = df_result["conlai"].fillna(0)
    df_result["available"] = df_result["tonkho"] + df_result["hangve"]
    df_result["need_order"] = df_result["available"] < df_result["forecast_qty"]

    df_need_order = df_result[df_result["need_order"] == True]

    st.subheader("üìã Danh s√°ch s·∫£n ph·∫©m")
    st.dataframe(df_result)

   # Combobox ch·ªçn m√£ s·∫£n ph·∫©m
    st.subheader("üìà L·ªãch s·ª≠ b√°n theo th√°ng")
    selected_spcode = st.selectbox("Ch·ªçn m√£ s·∫£n ph·∫©m ƒë·ªÉ xem bi·ªÉu ƒë·ªì:", df_result['spcode'].unique())
    
    # D·ªØ li·ªáu l·ªãch s·ª≠ c·ªßa m√£ s·∫£n ph·∫©m
    df_selected = df_sales[df_sales['spcode'] == selected_spcode].copy()
    df_selected['month'] = df_selected['date'].dt.to_period('M').astype(str)
    monthly_sales = df_selected.groupby('month')['numsell'].sum().reset_index()
    
    # Bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c v·ªõi tooltip
    fig = px.line(
        monthly_sales,
        x="month",
        y="numsell",
        markers=True,
        title=f"L·ªãch s·ª≠ b√°n h√†ng theo th√°ng - {selected_spcode}",
        labels={"month": "Th√°ng", "numsell": "S·ªë l∆∞·ª£ng b√°n"},
        hover_data={"month": True, "numsell": True}
    )
    fig.update_traces(hovertemplate='Th√°ng: %{x}<br>S·ªë l∆∞·ª£ng: %{y}')
    fig.update_layout(xaxis_tickangle=-45)
    
    st.plotly_chart(fig, use_container_width=True)
    # L·∫•y d·ªØ li·ªáu chi ti·∫øt s·∫£n ph·∫©m ƒë√£ ch·ªçn

    df_info = df_result[df_result["spcode"] == selected_spcode]
    
    # Hi·ªÉn th·ªã b·∫£ng th√¥ng tin s·∫£n ph·∫©m ƒë√£ ch·ªçn
    st.write("üìå **Th√¥ng tin s·∫£n ph·∫©m ƒë√£ ch·ªçn:**")
    st.dataframe(df_info)
    
    # L·ªçc v√† nh√≥m d·ªØ li·ªáu theo th√°ng cho s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
    df_selected = df_sales[df_sales['spcode'] == selected_spcode].copy()
    df_selected['month'] = df_selected['date'].dt.to_period('M').dt.to_timestamp()
    monthly_sales = df_selected.groupby('month')['numsell'].sum().reset_index()
    
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì l·ªãch s·ª≠
    fig = px.line(
        monthly_sales,
        x="month",
        y="numsell",
        markers=True,
        title=f"L·ªãch s·ª≠ b√°n h√†ng theo th√°ng - {selected_spcode}",
        labels={"month": "Th√°ng", "numsell": "S·ªë l∆∞·ª£ng b√°n"},
        hover_data={"month": True, "numsell": True}
    )
    fig.update_traces(hovertemplate='Th√°ng: %{x}<br>S·ªë l∆∞·ª£ng: %{y}')
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)
    
    # Ch·ªâ ch·∫°y LSTM n·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu (> 10 th√°ng)
    if len(monthly_sales) > 10:
        # Chu·∫©n h√≥a
        data = monthly_sales[['numsell']].values.astype('float32')
        scaler = MinMaxScaler(feature_range=(0, 1))
        data_scaled = scaler.fit_transform(data)
    
        # T·∫°o chu·ªói th·ªùi gian d·∫°ng sliding window
        def create_dataset(dataset, look_back=6, predict_forward=3):
            X, y = [], []
            for i in range(len(dataset) - look_back - predict_forward + 1):
                X.append(dataset[i:i + look_back, 0])
                y.append(dataset[i + look_back:i + look_back + predict_forward, 0])
            return np.array(X), np.array(y)
    
        look_back = 6
        predict_forward = 3
        X, y = create_dataset(data_scaled, look_back, predict_forward)
        X = np.reshape(X, (X.shape[0], X.shape[1], 1))
    
        # T·∫°o v√† hu·∫•n luy·ªán m√¥ h√¨nh LSTM
        model = Sequential()
        model.add(LSTM(50, input_shape=(look_back, 1)))
        model.add(Dense(predict_forward))
        model.compile(loss='mean_squared_error', optimizer='adam')
        model.fit(X, y, epochs=100, batch_size=8, verbose=0)
    
        # D·ª± b√°o 3 th√°ng ti·∫øp theo
        last_input = data_scaled[-look_back:]
        last_input = np.reshape(last_input, (1, look_back, 1))
        prediction_scaled = model.predict(last_input)
        prediction = scaler.inverse_transform(prediction_scaled).flatten()
    
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± b√°o
        last_date = monthly_sales['date'].max()
        future_months = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=3, freq='MS')
        df_forecast = pd.DataFrame({'Th√°ng': future_months.strftime('%Y-%m'), 'D·ª± b√°o s·ªë l∆∞·ª£ng b√°n': prediction.astype(int)})
    
        st.subheader("üîÆ D·ª± b√°o s·ªë l∆∞·ª£ng b√°n 3 th√°ng ti·∫øp theo")
        st.dataframe(df_forecast)
    
    else:
        st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± b√°o v·ªõi LSTM (c·∫ßn > 10 th√°ng).")

else:
    st.warning("D·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c t·∫£i.")









